{"version":3,"sources":["node_modules/browser-pack/_prelude.js","jsforce-api-bulk.min.js","lib/api/bulk.js","node_modules/process/browser.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Bulk","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","process","inherits","stream","Duplex","events","_","joinStreams","RecordStream","Promise","HttpApi","Job","bulk","type","operation","options","jobId","_bulk","id","state","_batches","EventEmitter","prototype","info","callback","_jobInfo","pkChunking","then","numberBatchesTotal","numberBatchesCompleted","resolve","check","thenCall","open","_logger","toLowerCase","body","extIdField","concurrencyMode","assignmentRuleId","join","headers","Content-Type","chunkingParams","Object","keys","filter","key","indexOf","map","_request","method","path","responseType","res","emit","jobInfo","err","createBatch","batch","Batch","on","batchId","logger","_waitAssign","debug","object","list","batchInfoList","batchInfo","isArray","retrieveBatches","all","parseInt","numberRecordsProcessed","stateMessage","retrieve","batchResults","results","forEach","batchResult","push","apply","close","fail","abort","_changeState","job","super_","objectMode","_deferred","defer","_setupDataStreams","Writable","converterOptions","nullValue","_uploadStream","Serializable","_uploadDataStream","_downloadStream","Parsable","_downloadDataStream","end","once","pipe","_createRequestStream","dataStream","_dataStream","_write","data","enc","cb","write","read","_read","size","chunk","record","clone","Id","attributes","run","exec","execute","input","_result","rdeferred","promise","reject","isObject","isFunction","String","isString","onResolved","onReject","onProgress","nextTick","poll","interval","timeout","startTime","Date","getTime","now","name","batchesComplete","setTimeout","_conn","result","ret","success","Success","errors","resultId","resultStream","resultDataStream","forever","gzip","BulkApi","arguments","beforeSend","request","accessToken","isSessionExpired","response","statusCode","test","hasErrorInResponseBody","error","parseError","errorCode","exceptionCode","message","exceptionMessage","conn","pollInterval","pollTimeout","baseUrl","instanceUrl","version","url","duration","load","constructor","createJob","cleanup","query","soql","m","replace","match","recordStream","lazyLoadedResultStreams","_process","2","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","len","marker","runClearTimeout","Item","array","noop","args","Array","title","browser","env","argv","versions","addListener","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask"],"mappings":"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","file":"jsforce-api-bulk.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var t;(t=(t=(t=(t=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).jsforce||(t.jsforce={})).modules||(t.modules={})).api||(t.api={})).Bulk=e()}}((function(){return function e(t,n,r){function o(s,a){if(!n[s]){if(!t[s]){var u=\"function\"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error(\"Cannot find module '\"+s+\"'\");throw c.code=\"MODULE_NOT_FOUND\",c}var h=n[s]={exports:{}};t[s][0].call(h.exports,(function(e){return o(t[s][1][e]||e)}),h,h.exports,e,t,n,r)}return n[s].exports}for(var i=\"function\"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,t,n){(function(e){\"use strict\";var n=window.jsforce.require(\"inherits\"),r=window.jsforce.require(\"readable-stream\"),o=r.Duplex,i=window.jsforce.require(\"events\"),s=window.jsforce.require(\"lodash/core\"),a=window.jsforce.require(\"multistream\"),u=window.jsforce.require(\"./core\"),c=window.jsforce.require(\"./record-stream\"),h=window.jsforce.require(\"./promise\"),l=window.jsforce.require(\"./http-api\"),f=function(e,t,n,r,o){this._bulk=e,this.type=t,this.operation=n,this.options=r||{},this.id=o,this.state=this.id?\"Open\":\"Unknown\",this._batches={}};n(f,i.EventEmitter),f.prototype.info=function(e){var t=this;if(this._jobInfo){if(t.options.pkChunking)return this._jobInfo.then((function(n){return\"0\"!==n.numberBatchesTotal&&n.numberBatchesTotal===n.numberBatchesCompleted?t._jobInfo=h.resolve(n):t._jobInfo=t.check(),t._jobInfo.thenCall(e)}))}else this._jobInfo=this.check();return this._jobInfo.thenCall(e)},f.prototype.open=function(e){var t=this,n=this._bulk;n._logger;if(!this._jobInfo){var r=this.operation.toLowerCase();\"harddelete\"===r&&(r=\"hardDelete\");var o=['<?xml version=\"1.0\" encoding=\"UTF-8\"?>','<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\"<operation>\"+r+\"</operation>\",\"<object>\"+this.type+\"</object>\",this.options.extIdField?\"<externalIdFieldName>\"+this.options.extIdField+\"</externalIdFieldName>\":\"\",this.options.concurrencyMode?\"<concurrencyMode>\"+this.options.concurrencyMode+\"</concurrencyMode>\":\"\",this.options.assignmentRuleId?\"<assignmentRuleId>\"+this.options.assignmentRuleId+\"</assignmentRuleId>\":\"\",\"<contentType>CSV</contentType>\",\"</jobInfo>\"].join(\"\"),i={\"Content-Type\":\"application/xml; charset=utf-8\"},s=this.options.pkChunking;if(s){var a=Object.keys(s).filter((function(e){return[\"chunkSize\",\"parent\",\"startRow\"].indexOf(e)>=0})).map((function(e){return e+\"=\"+s[e]}));a.length&&(i[\"Sforce-Enable-PKChunking\"]=a.join(\"; \"))}this._jobInfo=n._request({method:\"POST\",path:\"/job\",body:o,headers:i,responseType:\"application/xml\"}).then((function(e){return t.emit(\"open\",e.jobInfo),t.id=e.jobInfo.id,t.state=e.jobInfo.state,e.jobInfo}),(function(e){throw t.emit(\"error\",e),e}))}return this._jobInfo.thenCall(e)},f.prototype.createBatch=function(){var e=new p(this),t=this;return e.on(\"queue\",(function(){t._batches[e.id]=e})),e},f.prototype.batch=function(e){var t=this._batches[e];return t||(t=new p(this,e),this._batches[e]=t),t},f.prototype.check=function(e){var t=this,n=this._bulk,r=n._logger;return this._jobInfo=this._waitAssign().then((function(){return n._request({method:\"GET\",path:\"/job/\"+t.id,responseType:\"application/xml\"})})).then((function(e){return r.debug(e.jobInfo),t.id=e.jobInfo.id,t.type=e.jobInfo.object,t.operation=e.jobInfo.operation,t.state=e.jobInfo.state,e.jobInfo})),this._jobInfo.thenCall(e)},f.prototype._waitAssign=function(e){return(this.id?h.resolve({id:this.id}):this.open()).thenCall(e)},f.prototype.list=function(e){var t=this,n=this._bulk,r=n._logger;return this._waitAssign().then((function(){return n._request({method:\"GET\",path:\"/job/\"+t.id+\"/batch\",responseType:\"application/xml\"})})).then((function(e){r.debug(e.batchInfoList.batchInfo);var t=e.batchInfoList;return t=s.isArray(t.batchInfo)?t.batchInfo:[t.batchInfo]})).thenCall(e)},f.prototype.retrieveBatches=function(e){var t=this;return t.list().then((function(e){return h.all(e.map((function(e){if(\"NotProcessed\"===e.state||0===parseInt(e.numberRecordsProcessed,10))return h.resolve();if(\"Failed\"===e.state&&0===parseInt(e.numberRecordsProcessed,10))throw new Error(e.stateMessage);return t.batch(e.id).retrieve()})))})).then((function(e){const t=[];return e.forEach((function(e){e&&t.push.apply(t,e)})),t})).then((function(e){return t.close().then((function(){return e}))})).fail((function(e){return t.emit(\"error\",e),t.abort().then((function(){throw e}))})).thenCall(e)},f.prototype.close=function(){var e=this;return this._changeState(\"Closed\").then((function(t){return e.id=null,e.emit(\"close\",t),t}),(function(t){throw e.emit(\"error\",t),t}))},f.prototype.abort=function(){var e=this;return this._changeState(\"Aborted\").then((function(t){return e.id=null,e.emit(\"abort\",t),t}),(function(t){throw e.emit(\"error\",t),t}))},f.prototype._changeState=function(e,t){var n=this,r=this._bulk,o=r._logger;return this._jobInfo=this._waitAssign().then((function(){var t=['<?xml version=\"1.0\" encoding=\"UTF-8\"?>','<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\"<state>\"+e+\"</state>\",\"</jobInfo>\"].join(\"\");return r._request({method:\"POST\",path:\"/job/\"+n.id,body:t,headers:{\"Content-Type\":\"application/xml; charset=utf-8\"},responseType:\"application/xml\"})})).then((function(e){return o.debug(e.jobInfo),n.state=e.jobInfo.state,e.jobInfo})),this._jobInfo.thenCall(t)};var p=function(e,t){p.super_.call(this,{objectMode:!0}),this.job=e,this.id=t,this._bulk=e._bulk,this._deferred=h.defer(),this._setupDataStreams()};n(p,r.Writable),p.prototype._setupDataStreams=function(){var e=this,t={nullValue:\"#N/A\"};this._uploadStream=new c.Serializable,this._uploadDataStream=this._uploadStream.stream(\"csv\",t),this._downloadStream=new c.Parsable,this._downloadDataStream=this._downloadStream.stream(\"csv\",t),this.on(\"finish\",(function(){e._uploadStream.end()})),this._uploadDataStream.once(\"readable\",(function(){e.job.open().then((function(){e._uploadDataStream.pipe(e._createRequestStream())}))}));var n=this._dataStream=new o;n._write=function(t,n,r){e._uploadDataStream.write(t,n,r)},n.on(\"finish\",(function(){e._uploadDataStream.end()})),this._downloadDataStream.on(\"readable\",(function(){n.read(0)})),this._downloadDataStream.on(\"end\",(function(){n.push(null)})),n._read=function(t){for(var r;null!==(r=e._downloadDataStream.read());)n.push(r)}},p.prototype._createRequestStream=function(){var e=this,t=e._bulk,n=t._logger;return t._request({method:\"POST\",path:\"/job/\"+e.job.id+\"/batch\",headers:{\"Content-Type\":\"text/csv\"},responseType:\"application/xml\"},(function(t,r){t?e.emit(\"error\",t):(n.debug(r.batchInfo),e.id=r.batchInfo.id,e.emit(\"queue\",r.batchInfo))})).stream()},p.prototype._write=function(e,t,n){e=s.clone(e),\"insert\"===this.job.operation?delete e.Id:\"delete\"===this.job.operation&&(e={Id:e.Id}),delete e.type,delete e.attributes,this._uploadStream.write(e,t,n)},p.prototype.stream=function(){return this._dataStream},p.prototype.run=p.prototype.exec=p.prototype.execute=function(e,t){var n=this;if(\"function\"==typeof e&&(t=e,e=null),this._result)throw new Error(\"Batch already executed.\");var r,o=h.defer();(this._result=o.promise,this._result.then((function(e){n._deferred.resolve(e)}),(function(e){n._deferred.reject(e)})),this.once(\"response\",(function(e){o.resolve(e)})),this.once(\"error\",(function(e){o.reject(e)})),s.isObject(e)&&s.isFunction(e.pipe))?e.pipe(this._dataStream):s.isArray(e)?(s.forEach(e,(function(e){Object.keys(e).forEach((function(t){\"boolean\"==typeof e[t]&&(e[t]=String(e[t]))})),n.write(e)})),n.end()):s.isString(e)&&(r=e,this._dataStream.write(r,\"utf8\"),this._dataStream.end());return this.thenCall(t)},p.prototype.then=function(e,t,n){return this._deferred.promise.then(e,t,n)},p.prototype.thenCall=function(t){return s.isFunction(t)&&this.then((function(n){e.nextTick((function(){t(null,n)}))}),(function(n){e.nextTick((function(){t(n)}))})),this},p.prototype.check=function(e){var t=this._bulk,n=t._logger,r=this.job.id,o=this.id;if(!r||!o)throw new Error(\"Batch not started.\");return t._request({method:\"GET\",path:\"/job/\"+r+\"/batch/\"+o,responseType:\"application/xml\"}).then((function(e){return n.debug(e.batchInfo),e.batchInfo})).thenCall(e)},p.prototype.poll=function(e,t){var n=this,r=this.job,o=this.id;if(!r.id||!o)throw new Error(\"Batch not started.\");var i=(new Date).getTime(),s=function(){var a=(new Date).getTime();if(i+t<a){var u=new Error(\"Polling time out. Job Id = \"+r.id+\" , batch Id = \"+o);return u.name=\"PollingTimeout\",u.jobId=r.id,u.batchId=o,void n.emit(\"error\",u)}r.info().then((function(t){n.check((function(o,i){const a=\"0\"!==t.numberBatchesTotal&&t.numberBatchesTotal===t.numberBatchesCompleted;o?n.emit(\"error\",o):\"Failed\"===i.state?parseInt(i.numberRecordsProcessed,10)>0?n.retrieve():n.emit(\"error\",new Error(i.stateMessage)):\"Completed\"===i.state?n.retrieve():\"NotProcessed\"===i.state&&a?r.retrieveBatches().then((function(e){n.emit(\"response\",e)})).fail((function(e){n.emit(\"error\",e)})):(n.emit(\"progress\",i),setTimeout(s,e))}))}))};setTimeout(s,e)},p.prototype.retrieve=function(e){var t=this,n=this._bulk,r=this.job.id,o=this.job,i=this.id;if(!r||!i)throw new Error(\"Batch not started.\");return o.info().then((function(e){return n._request({method:\"GET\",path:\"/job/\"+r+\"/batch/\"+i+\"/result\"})})).then((function(e){var a;if(\"query\"===o.operation){n._conn,e[\"result-list\"].result;a=e[\"result-list\"].result,a=s.map(s.isArray(a)?a:[a],(function(e){return{id:e,batchId:i,jobId:r}}))}else a=s.map(e,(function(e){return{id:e.Id||null,success:\"true\"===e.Success,errors:e.Error?[e.Error]:[]}}));return t.emit(\"response\",a),a})).fail((function(e){throw t.emit(\"error\",e),e})).thenCall(e)},p.prototype.result=function(e){var t=this.job.id,n=this.id;if(!t||!n)throw new Error(\"Batch not started.\");var r=new c.Parsable,o=r.stream(\"csv\");this._bulk._request({method:\"GET\",path:\"/job/\"+t+\"/batch/\"+n+\"/result/\"+e,responseType:\"application/octet-stream\",forever:!0,gzip:!0}).stream().on(\"error\",(function(e){o.emit(\"error\",e)})).pipe(o);return r};var d=function(){d.super_.apply(this,arguments)};n(d,l),d.prototype.beforeSend=function(e){e.headers=e.headers||{},e.headers[\"X-SFDC-SESSION\"]=this._conn.accessToken},d.prototype.isSessionExpired=function(e){return 400===e.statusCode&&/<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(e.body)},d.prototype.hasErrorInResponseBody=function(e){return!!e.error},d.prototype.parseError=function(e){return{errorCode:e.error.exceptionCode,message:e.error.exceptionMessage}};var b=function(e){this._conn=e,this._logger=e._logger};b.prototype.pollInterval=1e3,b.prototype.pollTimeout=1e4,b.prototype._request=function(e,t){var n=this._conn;e=s.clone(e);var r=[n.instanceUrl,\"services/async\",n.version].join(\"/\");e.url=r+e.path;var o={responseType:e.responseType};return delete e.path,delete e.responseType,new d(this._conn,o).on(\"requestDuration\",(function(e){n.emit(\"requestDuration\",e)})).request(e).thenCall(t)},b.prototype.load=function(e,t,n,r,o){var i=this;if(!e||!t)throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");s.isObject(n)&&n.constructor===Object||(o=r,r=n,n=null);var a=this.createJob(e,t,n);a.once(\"error\",(function(e){u&&u.emit(\"error\",e)}));var u=a.createBatch(),c=function(){u=null,a.close()};return u.on(\"response\",c),u.on(\"error\",(function(e){\"PollingTimeout\"!==e.name&&c()})),u.on(\"queue\",(function(){u.poll(i.pollInterval,i.pollTimeout)})),u.execute(r,o)},b.prototype.query=function(e,t){var n=e.replace(/\\([\\s\\S]+\\)/g,\"\").match(/FROM\\s+(\\w+)/i);if(!n)throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");var r=n[1],o=this,i=new c.Parsable,s=i.stream(\"csv\");return this.load(r,\"query\",t||{},e).then((function(e){var t=e.map((function(e){const t=o.job(e.jobId).batch(e.batchId);return function(){return t.result(e.id).stream()}}));a(t).on(\"error\",(function(e){s.emit(\"error\",e)})).on(\"end\",(function(){s.emit(\"end\")})).pipe(s)})).fail((function(e){s.emit(\"error\",e)})),i},b.prototype.createJob=function(e,t,n){return new f(this,e,t,n)},b.prototype.job=function(e){return new f(this,null,null,null,e)},u.on(\"connection:new\",(function(e){e.bulk=new b(e)})),t.exports=b}).call(this,e(\"_process\"))},{_process:2}],2:[function(e,t,n){var r,o,i=t.exports={};function s(){throw new Error(\"setTimeout has not been defined\")}function a(){throw new Error(\"clearTimeout has not been defined\")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r=\"function\"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{o=\"function\"==typeof clearTimeout?clearTimeout:a}catch(e){o=a}}();var c,h=[],l=!1,f=-1;function p(){l&&c&&(l=!1,c.length?h=c.concat(h):f=-1,h.length&&d())}function d(){if(!l){var e=u(p);l=!0;for(var t=h.length;t;){for(c=h,h=[];++f<t;)c&&c[f].run();f=-1,t=h.length}c=null,l=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function b(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];h.push(new b(e,t)),1!==h.length||l||u(d)},b.prototype.run=function(){this.fun.apply(null,this.array)},i.title=\"browser\",i.browser=!0,i.env={},i.argv=[],i.version=\"\",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error(\"process.binding is not supported\")},i.cwd=function(){return\"/\"},i.chdir=function(e){throw new Error(\"process.chdir is not supported\")},i.umask=function(){return 0}},{}]},{},[1])(1)}));\n//# sourceMappingURL=jsforce-api-bulk.min.js.map\n","/*global process*/\n/**\n * @file Manages Salesforce Bulk API related operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits     = window.jsforce.require('inherits'),\n    stream       = window.jsforce.require('readable-stream'),\n    Duplex       = stream.Duplex,\n    events       = window.jsforce.require('events'),\n    _            = window.jsforce.require('lodash/core'),\n    joinStreams  = window.jsforce.require('multistream'),\n    jsforce      = window.jsforce.require('./core'),\n    RecordStream = window.jsforce.require('./record-stream'),\n    Promise      = window.jsforce.require('./promise'),\n    HttpApi      = window.jsforce.require('./http-api');\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API Job\n *\n * @protected\n * @class Bulk~Job\n * @extends events.EventEmitter\n *\n * @param {Bulk} bulk - Bulk API object\n * @param {String} [type] - SObject type\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {String} [jobId] - Job ID (if already available)\n */\nvar Job = function(bulk, type, operation, options, jobId) {\n  this._bulk = bulk;\n  this.type = type;\n  this.operation = operation;\n  this.options = options || {};\n  this.id = jobId;\n  this.state = this.id ? 'Open' : 'Unknown';\n  this._batches = {};\n};\n\ninherits(Job, events.EventEmitter);\n\n/**\n * @typedef {Object} Bulk~JobInfo\n * @prop {String} id - Job ID\n * @prop {String} object - Object type name\n * @prop {String} operation - Operation type of the job\n * @prop {String} state - Job status\n */\n\n/**\n * Return latest jobInfo from cache\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.info = function(callback) {\n  var self = this;\n  // if cache is not available, check the latest\n  if (!this._jobInfo) {\n    this._jobInfo = this.check();\n  } else if (self.options.pkChunking) {\n    return this._jobInfo.then(function (info) {\n      if (info.numberBatchesTotal !== '0' && info.numberBatchesTotal === info.numberBatchesCompleted) {\n        self._jobInfo = Promise.resolve(info);\n      } else {\n        self._jobInfo = self.check();\n      }\n      return self._jobInfo.thenCall(callback);\n    })\n  }\n\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Open new job and get jobinfo\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.open = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  // if not requested opening job\n  if (!this._jobInfo) {\n    var operation = this.operation.toLowerCase();\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<operation>' + operation + '</operation>',\n        '<object>' + this.type + '</object>',\n        (this.options.extIdField ?\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\n         ''),\n        (this.options.concurrencyMode ?\n         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :\n         ''),\n        (this.options.assignmentRuleId ?\n          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :\n          ''),\n        '<contentType>CSV</contentType>',\n      '</jobInfo>'\n    ].join('');\n\n    var headers = {\n      'Content-Type' : 'application/xml; charset=utf-8'\n    };\n    var pkChunking = this.options.pkChunking;\n    if(pkChunking) {\n      var chunkingParams = Object.keys(pkChunking)\n        .filter(function(key) {\n          return ['chunkSize', 'parent', 'startRow'].indexOf(key) >= 0;\n        })\n        .map(function(key) {\n          return key + '=' + pkChunking[key];\n        });\n      if(chunkingParams.length)\n        headers['Sforce-Enable-PKChunking'] = chunkingParams.join('; ');\n    }\n\n    this._jobInfo = bulk._request({\n      method : 'POST',\n      path : \"/job\",\n      body : body,\n      headers : headers,\n      responseType: \"application/xml\"\n    }).then(function(res) {\n      self.emit(\"open\", res.jobInfo);\n      self.id = res.jobInfo.id;\n      self.state = res.jobInfo.state;\n      return res.jobInfo;\n    }, function(err) {\n      self.emit(\"error\", err);\n      throw err;\n    });\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Create a new batch instance in the job\n *\n * @method Bulk~Job#createBatch\n * @returns {Bulk~Batch}\n */\nJob.prototype.createBatch = function() {\n  var batch = new Batch(this);\n  var self = this;\n  batch.on('queue', function() {\n    self._batches[batch.id] = batch;\n  });\n  return batch;\n};\n\n/**\n * Get a batch instance specified by given batch ID\n *\n * @method Bulk~Job#batch\n * @param {String} batchId - Batch ID\n * @returns {Bulk~Batch}\n */\nJob.prototype.batch = function(batchId) {\n  var batch = this._batches[batchId];\n  if (!batch) {\n    batch = new Batch(this, batchId);\n    this._batches[batchId] = batch;\n  }\n  return batch;\n};\n\n/**\n * Check the latest job status from server\n *\n * @method Bulk~Job#check\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id,\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.id = res.jobInfo.id;\n    self.type = res.jobInfo.object;\n    self.operation = res.jobInfo.operation;\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Wait till the job is assigned to server\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype._waitAssign = function(callback) {\n  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);\n};\n\n\n/**\n * List all registered batch info in job\n *\n * @method Bulk~Job#list\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\n */\nJob.prototype.list = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  return this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id + \"/batch\",\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.batchInfoList.batchInfo);\n    var batchInfoList = res.batchInfoList;\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\n    return batchInfoList;\n  }).thenCall(callback);\n};\n\nJob.prototype.retrieveBatches = function(callback) {\n  var self = this;\n\n  return self.list().then(function (batchInfoList) {\n    return Promise.all(batchInfoList.map(function(batchInfo) {\n      if (batchInfo.state === 'NotProcessed' || parseInt(batchInfo.numberRecordsProcessed, 10) === 0) return Promise.resolve();\n      if (batchInfo.state === 'Failed' && parseInt(batchInfo.numberRecordsProcessed, 10) === 0) {\n        throw new Error(batchInfo.stateMessage)\n      }\n      return self.batch(batchInfo.id).retrieve();\n    }));\n  }).then(function(batchResults) {\n    const results = [];\n    batchResults.forEach(function(batchResult) {\n      if (!batchResult) return;\n      results.push.apply(results, batchResult);\n    });\n    return results;\n  }).then(function(results) {\n    return self.close().then(function() {\n      return results;\n    })\n  }).fail(function(err) {\n    self.emit(\"error\", err);\n    return self.abort().then(function () {\n      throw err;\n    });\n  }).thenCall(callback);\n}\n\n/**\n * Close opened job\n *\n * @method Bulk~Job#close\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.close = function() {\n  var self = this;\n  return this._changeState(\"Closed\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"close\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * Set the status to abort\n *\n * @method Bulk~Job#abort\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.abort = function() {\n  var self = this;\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"abort\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * @private\n */\nJob.prototype._changeState = function(state, callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<state>' + state + '</state>',\n      '</jobInfo>'\n    ].join('');\n    return bulk._request({\n      method : 'POST',\n      path : \"/job/\" + self.id,\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * Batch (extends RecordStream)\n *\n * @protected\n * @class Bulk~Batch\n * @extends {stream.Writable}\n * @implements {Promise.<Array.<RecordResult>>}\n * @param {Bulk~Job} job - Bulk job object\n * @param {String} [batchId] - Batch ID (if already available)\n */\nvar Batch = function(job, batchId) {\n  Batch.super_.call(this, { objectMode: true });\n  this.job = job;\n  this.id = batchId;\n  this._bulk = job._bulk;\n  this._deferred = Promise.defer();\n  this._setupDataStreams();\n};\n\ninherits(Batch, stream.Writable);\n\n\n/**\n * @private\n */\nBatch.prototype._setupDataStreams = function() {\n  var batch = this;\n  var converterOptions = { nullValue : '#N/A' };\n  this._uploadStream = new RecordStream.Serializable();\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\n  this._downloadStream = new RecordStream.Parsable();\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\n\n  this.on('finish', function() {\n    batch._uploadStream.end();\n  });\n  this._uploadDataStream.once('readable', function() {\n    batch.job.open().then(function() {\n      // pipe upload data to batch API request stream\n      batch._uploadDataStream.pipe(batch._createRequestStream());\n    });\n  });\n\n  // duplex data stream, opened access to API programmers by Batch#stream()\n  var dataStream = this._dataStream = new Duplex();\n  dataStream._write = function(data, enc, cb) {\n    batch._uploadDataStream.write(data, enc, cb);\n  };\n  dataStream.on('finish', function() {\n    batch._uploadDataStream.end();\n  });\n\n  this._downloadDataStream.on('readable', function() {\n    dataStream.read(0);\n  });\n  this._downloadDataStream.on('end', function() {\n    dataStream.push(null);\n  });\n  dataStream._read = function(size) {\n    var chunk;\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\n      dataStream.push(chunk);\n    }\n  };\n};\n\n/**\n * Connect batch API and create stream instance of request/response\n *\n * @private\n * @returns {stream.Duplex}\n */\nBatch.prototype._createRequestStream = function() {\n  var batch = this;\n  var bulk = batch._bulk;\n  var logger = bulk._logger;\n\n  return bulk._request({\n    method : 'POST',\n    path : \"/job/\" + batch.job.id + \"/batch\",\n    headers: {\n      \"Content-Type\": \"text/csv\"\n    },\n    responseType: \"application/xml\"\n  }, function(err, res) {\n    if (err) {\n      batch.emit('error', err);\n    } else {\n      logger.debug(res.batchInfo);\n      batch.id = res.batchInfo.id;\n      batch.emit('queue', res.batchInfo);\n    }\n  }).stream();\n};\n\n/**\n * Implementation of Writable\n *\n * @override\n * @private\n */\nBatch.prototype._write = function(record, enc, cb) {\n  record = _.clone(record);\n  if (this.job.operation === \"insert\") {\n    delete record.Id;\n  } else if (this.job.operation === \"delete\") {\n    record = { Id: record.Id };\n  }\n  delete record.type;\n  delete record.attributes;\n  this._uploadStream.write(record, enc, cb);\n};\n\n/**\n * Returns duplex stream which accepts CSV data input and batch result output\n *\n * @returns {stream.Duplex}\n */\nBatch.prototype.stream = function() {\n  return this._dataStream;\n};\n\n/**\n * Execute batch operation\n *\n * @method Bulk~Batch#execute\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBatch.prototype.run =\nBatch.prototype.exec =\nBatch.prototype.execute = function(input, callback) {\n  var self = this;\n\n  if (typeof input === 'function') { // if input argument is omitted\n    callback = input;\n    input = null;\n  }\n\n  // if batch is already executed\n  if (this._result) {\n    throw new Error(\"Batch already executed.\");\n  }\n\n  var rdeferred = Promise.defer();\n  this._result = rdeferred.promise;\n  this._result.then(function(res) {\n    self._deferred.resolve(res);\n  }, function(err) {\n    self._deferred.reject(err);\n  });\n  this.once('response', function(res) {\n    rdeferred.resolve(res);\n  });\n  this.once('error', function(err) {\n    rdeferred.reject(err);\n  });\n\n  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface\n    input.pipe(this._dataStream);\n  } else {\n    var data;\n    if (_.isArray(input)) {\n      _.forEach(input, function(record) {\n        Object.keys(record).forEach(function(key) {\n          if (typeof record[key] === 'boolean') {\n            record[key] = String(record[key])\n          }\n        })\n        self.write(record);\n      });\n      self.end();\n    } else if (_.isString(input)){\n      data = input;\n      this._dataStream.write(data, 'utf8');\n      this._dataStream.end();\n    }\n  }\n\n  // return Batch instance for chaining\n  return this.thenCall(callback);\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Bulk~Batch#then\n */\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Bulk~Batch#thenCall\n */\nBatch.prototype.thenCall = function(callback) {\n  if (_.isFunction(callback)) {\n    this.then(function(res) {\n      process.nextTick(function() {\n        callback(null, res);\n      });\n    }, function(err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    });\n  }\n  return this;\n};\n\n/**\n * @typedef {Object} Bulk~BatchInfo\n * @prop {String} id - Batch ID\n * @prop {String} jobId - Job ID\n * @prop {String} state - Batch state\n * @prop {String} stateMessage - Batch state message\n */\n\n/**\n * Check the latest batch status in server\n *\n * @method Bulk~Batch#check\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~BatchInfo>}\n */\nBatch.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\n    responseType: \"application/xml\"\n  }).then(function(res) {\n    logger.debug(res.batchInfo);\n    return res.batchInfo;\n  }).thenCall(callback);\n};\n\n\n/**\n * Polling the batch result and retrieve\n *\n * @method Bulk~Batch#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nBatch.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var job = this.job;\n  var batchId = this.id;\n\n  if (!job.id || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var err = new Error(\"Polling time out. Job Id = \" + job.id + \" , batch Id = \" + batchId);\n      err.name = 'PollingTimeout';\n      err.jobId = job.id;\n      err.batchId = batchId;\n      self.emit('error', err);\n      return;\n    }\n    job.info().then(function(jobInfo) {\n      self.check(function(err, res) {\n        const batchesComplete = jobInfo.numberBatchesTotal !== '0' && jobInfo.numberBatchesTotal === jobInfo.numberBatchesCompleted;\n        if (err) {\n          self.emit('error', err);\n        } else {\n          if (res.state === \"Failed\") {\n            if (parseInt(res.numberRecordsProcessed, 10) > 0) {\n              self.retrieve();\n            } else {\n              self.emit('error', new Error(res.stateMessage));\n            }\n          } else if (res.state === \"Completed\"){\n            self.retrieve();\n          } else if (res.state === \"NotProcessed\" && batchesComplete) {\n            job.retrieveBatches()\n              .then(function (results) {\n                self.emit('response', results);\n              })\n              .fail(function(err) {\n                self.emit('error', err);\n              });\n          } else {\n            self.emit('progress', res);\n            setTimeout(poll, interval);\n          }\n        }\n      });\n    })\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * @typedef {Object} Bulk~BatchResultInfo\n * @prop {String} id - Batch result ID\n * @prop {String} batchId - Batch ID which includes this batch result.\n * @prop {String} jobId - Job ID which includes this batch result.\n */\n\n/**\n * Retrieve batch result\n *\n * @method Bulk~Batch#retrieve\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\n */\nBatch.prototype.retrieve = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var jobId = this.job.id;\n  var job = this.job;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return job.info().then(function(jobInfo) {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\n    });\n  }).then(function(res) {\n    var results;\n    if (job.operation === 'query') {\n      var conn = bulk._conn;\n      var resultIds = res['result-list'].result;\n      results = res['result-list'].result;\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\n        return {\n          id: id,\n          batchId: batchId,\n          jobId: jobId\n        };\n      });\n    } else {\n      results = _.map(res, function(ret) {\n        return {\n          id: ret.Id || null,\n          success: ret.Success === \"true\",\n          errors: ret.Error ? [ ret.Error ] : []\n        };\n      });\n    }\n    self.emit('response', results);\n    return results;\n  }).fail(function(err) {\n    self.emit('error', err);\n    throw err;\n  }).thenCall(callback);\n};\n\n/**\n * Fetch query result as a record stream\n * @param {String} resultId - Result id\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\n */\nBatch.prototype.result = function(resultId) {\n  var jobId = this.job.id;\n  var batchId = this.id;\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var resultStream = new RecordStream.Parsable();\n  var resultDataStream = resultStream.stream('csv');\n\n  var reqStream = this._bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId,\n    responseType: \"application/octet-stream\",\n    forever: true,\n    gzip: true\n  }).stream()\n    .on('error', function(err) { resultDataStream.emit('error', err); })\n    .pipe(resultDataStream);\n\n  return resultStream;\n};\n\n/*--------------------------------------------*/\n/**\n * @private\n */\nvar BulkApi = function() {\n  BulkApi.super_.apply(this, arguments);\n};\n\ninherits(BulkApi, HttpApi);\n\nBulkApi.prototype.beforeSend = function(request) {\n  request.headers = request.headers || {};\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\n};\n\nBulkApi.prototype.isSessionExpired = function(response) {\n  return response.statusCode === 400 &&\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\n};\n\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\n  return !!body.error;\n};\n\nBulkApi.prototype.parseError = function(body) {\n  return {\n    errorCode: body.error.exceptionCode,\n    message: body.error.exceptionMessage\n  };\n};\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Bulk = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n};\n\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollTimeout = 10000;\n\n/** @private **/\nBulk.prototype._request = function(request, callback) {\n  var conn = this._conn;\n  request = _.clone(request);\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\n  request.url = baseUrl + request.path;\n  var options = { responseType: request.responseType };\n  delete request.path;\n  delete request.responseType;\n  return new BulkApi(this._conn, options)\n    .on('requestDuration', function (duration) { conn.emit('requestDuration', duration); })\n    .request(request)\n    .thenCall(callback);\n};\n\n/**\n * Create and start bulkload job and batch\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBulk.prototype.load = function(type, operation, options, input, callback) {\n  var self = this;\n  if (!type || !operation) {\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\n  }\n  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted\n    callback = input;\n    input = options;\n    options = null;\n  }\n  var job = this.createJob(type, operation, options);\n  job.once('error', function (error) {\n    if (batch) {\n      batch.emit('error', error); // pass job error to batch\n    }\n  });\n  var batch = job.createBatch();\n  var cleanup = function() {\n    batch = null;\n    job.close();\n  };\n  var cleanupOnError = function(err) {\n    if (err.name !== 'PollingTimeout') {\n      cleanup();\n    }\n  };\n  batch.on('response', cleanup);\n  batch.on('error', cleanupOnError);\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\n  return batch.execute(input, callback);\n};\n\n/**\n * Execute bulk query and get record stream\n *\n * @param {String} soql - SOQL to execute in bulk job\n * @param {Object} options - Options on how to execute the Job\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\n */\nBulk.prototype.query = function(soql, options) {\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\n  if (!m) {\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\n  }\n  var type = m[1];\n  var self = this;\n  var recordStream = new RecordStream.Parsable();\n  var dataStream = recordStream.stream('csv');\n\n  this.load(type, \"query\", options || {}, soql).then(function(results) {\n    var lazyLoadedResultStreams = results.map(function(result) {\n      const batch = self\n        .job(result.jobId)\n        .batch(result.batchId);\n\n      return function() {\n        return batch\n          .result(result.id)\n          .stream();\n      }\n    });\n\n    joinStreams(lazyLoadedResultStreams)\n      .on('error', function(err) { dataStream.emit('error', err); })\n      .on('end', function () { dataStream.emit('end'); })\n      .pipe(dataStream);\n  }).fail(function(err) {\n    dataStream.emit('error', err);\n  });\n  return recordStream;\n};\n\n\n/**\n * Create a new job instance\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\n * @param {Object} [options] - Options for bulk loading operation\n * @returns {Bulk~Job}\n */\nBulk.prototype.createJob = function(type, operation, options) {\n  return new Job(this, type, operation, options);\n};\n\n/**\n * Get a job instance specified by given job ID\n *\n * @param {String} jobId - Job ID\n * @returns {Bulk~Job}\n */\nBulk.prototype.job = function(jobId) {\n  return new Job(this, null, null, null, jobId);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.bulk = new Bulk(conn);\n});\n\n\nmodule.exports = Bulk;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"]}