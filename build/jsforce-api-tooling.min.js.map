{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/api/tooling.js","jsforce-api-tooling.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Tooling","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_","Cache","conn","_conn","_logger","forEach","method","constructor","prototype","cache","cacheOptions","key","type","describe$","makeCacheable","describe","makeResponseCacheable","describeSObject$","describeSObject","describeGlobal$","describeGlobal","initialize","sobjects","clear","get","on","bind","res","result","map","so","name","sobject","_baseUrl","request","apply","arguments","executeAnonymous","body","callback","url","encodeURIComponent","thenCall","runTestsAsynchronous","classids","requestPost","join","undefined","runTestsSynchronous","classnames","completions","isString","tooling"],"mappings":"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","file":"jsforce-api-tooling.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * @file Manages Tooling APIs\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar jsforce = window.jsforce.require('./core'),\n    _     = window.jsforce.require('lodash/core'),\n    Cache = window.jsforce.require('./cache');\n\n/**\n * API class for Tooling API call\n *\n * @class\n * @param {Connection} conn - Connection\n */\nvar Tooling = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n  var delegates = [\n    \"query\",\n    \"queryMore\",\n    \"create\",\n    \"insert\",\n    \"retrieve\",\n    \"update\",\n    \"upsert\",\n    \"del\",\n    \"delete\",\n    \"destroy\",\n    \"describe\",\n    \"describeGlobal\",\n    \"sobject\"\n  ];\n  delegates.forEach(function(method) {\n    this[method] = conn.constructor.prototype[method];\n  }, this);\n\n  this.cache = new Cache();\n\n  var cacheOptions = {\n    key: function(type) { return type ? \"describe.\" + type : \"describe\"; }\n  };\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\n  this.describeSObject$ = this.describe$;\n  this.describeSObject = this.describe;\n\n  cacheOptions = { key: 'describeGlobal' };\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\n\n  this.initialize();\n};\n\n/**\n * Initialize tooling API\n * @protected\n */\nTooling.prototype.initialize = function() {\n  this.sobjects = {};\n  this.cache.clear();\n  this.cache.get('describeGlobal').on('value', _.bind(function(res) {\n    if (res.result) {\n      var types = _.map(res.result.sobjects, function(so) { return so.name; });\n      types.forEach(this.sobject, this);\n    }\n  }, this));\n};\n\n/**\n * @private\n */\nTooling.prototype._baseUrl = function() {\n  return this._conn._baseUrl() + \"/tooling\";\n};\n\n/**\n * @private\n */\nTooling.prototype.request = function() {\n  return this._conn.request.apply(this._conn, arguments);\n};\n\n/**\n * Execute query by using SOQL\n *\n * @param {String} soql - SOQL string\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n/**\n * Query next record set by using query locator\n *\n * @method Tooling#query\n * @param {String} locator - Next record set locator\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n/**\n * Retrieve specified records\n *\n * @method Tooling#queryMore\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\n * @returns {Promise.<Record|Array.<Record>>}\n */\n\n/**\n * Synonym of Tooling#create()\n *\n * @method Tooling#insert\n * @param {String} type - SObject Type\n * @param {Object|Array.<Object>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Create records\n *\n * @method Tooling#create\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Update records\n *\n * @method Tooling#update\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to update\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Upsert records\n *\n * @method Tooling#upsert\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\n * @param {String} extIdField - External ID field name\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#destroy()\n *\n * @method Tooling#delete\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Synonym of Tooling#destroy()\n *\n * @method Tooling#del\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Delete records\n *\n * @method Tooling#destroy\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#describe()\n *\n * @method Tooling#describeSObject\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n/**\n * Describe SObject metadata\n *\n * @method Tooling#describe\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n\n/**\n * Describe global SObjects\n *\n * @method Tooling#describeGlobal\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\n * @returns {Promise.<DescribeGlobalResult>}\n */\n\n/**\n * Get SObject instance\n *\n * @method Tooling#sobject\n * @param {String} type - SObject Type\n * @returns {SObject}\n */\n\n/**\n * @typedef {Object} Tooling~ExecuteAnonymousResult\n * @prop {Boolean} compiled - Flag if the query is compiled successfully\n * @prop {String} compileProblem - Error reason in compilation\n * @prop {Boolean} success - Flag if the code is executed successfully\n * @prop {Number} line - Line number for the error\n * @prop {Number} column - Column number for the error\n * @prop {String} exceptionMessage - Exception message\n * @prop {String} exceptionStackTrace - Exception stack trace\n */\n/**\n * Executes Apex code anonymously\n *\n * @param {String} body - Anonymous Apex code\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\nTooling.prototype.executeAnonymous = function(body, callback) {\n  var url = this._baseUrl() + \"/executeAnonymous?anonymousBody=\" + encodeURIComponent(body);\n  return this.request(url).thenCall(callback);\n};\n\n/**\n * Executes Apex tests asynchronously\n *\n * @param {Array.<String>} classids - Comma separated list of class IDs\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\nTooling.prototype.runTestsAsynchronous = function(classids, callback) {\n  var url = this._baseUrl() + \"/runTestsAsynchronous/\";\n  return this._conn.requestPost(url, {classids : classids.join(',')}, undefined, callback);\n};\n\n/**\n * Executes Apex tests synchronously\n *\n * @param {Array.<String>} classnames - Comma separated list of class Names\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\nTooling.prototype.runTestsSynchronous = function(classnames, callback) {\n  var url = this._baseUrl() + \"/runTestsSynchronous/\";\n  return this._conn.requestPost(url, {classnames : classnames.join(',')}, undefined, callback);\n};\n\n/**\n * @typedef {Object} Tooling~CompletionsResult\n * @prop {Object} publicDeclarations\n */\n/**\n * Retrieves available code completions of the referenced type\n *\n * @param {String} [type] - completion type (default 'apex')\n * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~CompletionsResult>}\n */\nTooling.prototype.completions = function(type, callback) {\n  if (!_.isString(type)) {\n    callback = type;\n    type = 'apex';\n  }\n  var url = this._baseUrl() + \"/completions?type=\" + encodeURIComponent(type);\n  return this.request(url).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.tooling = new Tooling(conn);\n});\n\n\nmodule.exports = Tooling;\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var t;(t=(t=(t=(t=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).jsforce||(t.jsforce={})).modules||(t.modules={})).api||(t.api={})).Tooling=e()}}((function(){return function e(t,o,n){function s(i,c){if(!o[i]){if(!t[i]){var u=\"function\"==typeof require&&require;if(!c&&u)return u(i,!0);if(r)return r(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var h=o[i]={exports:{}};t[i][0].call(h.exports,(function(e){return s(t[i][1][e]||e)}),h,h.exports,e,t,o,n)}return o[i].exports}for(var r=\"function\"==typeof require&&require,i=0;i<n.length;i++)s(n[i]);return s}({1:[function(e,t,o){\"use strict\";var n=window.jsforce.require(\"./core\"),s=window.jsforce.require(\"lodash/core\"),r=window.jsforce.require(\"./cache\"),i=function(e){this._conn=e,this._logger=e._logger;[\"query\",\"queryMore\",\"create\",\"insert\",\"retrieve\",\"update\",\"upsert\",\"del\",\"delete\",\"destroy\",\"describe\",\"describeGlobal\",\"sobject\"].forEach((function(t){this[t]=e.constructor.prototype[t]}),this),this.cache=new r;var t={key:function(e){return e?\"describe.\"+e:\"describe\"}};this.describe$=this.cache.makeCacheable(this.describe,this,t),this.describe=this.cache.makeResponseCacheable(this.describe,this,t),this.describeSObject$=this.describe$,this.describeSObject=this.describe,t={key:\"describeGlobal\"},this.describeGlobal$=this.cache.makeCacheable(this.describeGlobal,this,t),this.describeGlobal=this.cache.makeResponseCacheable(this.describeGlobal,this,t),this.initialize()};i.prototype.initialize=function(){this.sobjects={},this.cache.clear(),this.cache.get(\"describeGlobal\").on(\"value\",s.bind((function(e){e.result&&s.map(e.result.sobjects,(function(e){return e.name})).forEach(this.sobject,this)}),this))},i.prototype._baseUrl=function(){return this._conn._baseUrl()+\"/tooling\"},i.prototype.request=function(){return this._conn.request.apply(this._conn,arguments)},i.prototype.executeAnonymous=function(e,t){var o=this._baseUrl()+\"/executeAnonymous?anonymousBody=\"+encodeURIComponent(e);return this.request(o).thenCall(t)},i.prototype.runTestsAsynchronous=function(e,t){var o=this._baseUrl()+\"/runTestsAsynchronous/\";return this._conn.requestPost(o,{classids:e.join(\",\")},void 0,t)},i.prototype.runTestsSynchronous=function(e,t){var o=this._baseUrl()+\"/runTestsSynchronous/\";return this._conn.requestPost(o,{classnames:e.join(\",\")},void 0,t)},i.prototype.completions=function(e,t){s.isString(e)||(t=e,e=\"apex\");var o=this._baseUrl()+\"/completions?type=\"+encodeURIComponent(e);return this.request(o).thenCall(t)},n.on(\"connection:new\",(function(e){e.tooling=new i(e)})),t.exports=i},{}]},{},[1])(1)}));\n//# sourceMappingURL=jsforce-api-tooling.min.js.map\n"]}